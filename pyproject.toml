[project]
name = "relikt-arte-api"
version = "0.1.0"
description = "Relikt Arte API"
authors = [
    {name = "Oleg Kuzmenko",email = "okuzmenko31us@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "fastapi (>=0.116.1,<0.117.0)",
    "pydantic (>=2.11.9,<3.0.0)",
    "pydantic-extra-types (>=2.10.5,<3.0.0)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "email-validator (>=2.3.0,<3.0.0)",
    "sqlalchemy (>=2.0.43,<3.0.0)",
    "greenlet (>=3.2.4,<4.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "alembic (>=1.16.5,<2.0.0)",
    "alembic-postgresql-enum (>=1.8.0,<2.0.0)",
    "redis[hiredis] (>=6.4.0,<7.0.0)",
    "python-jose (>=3.5.0,<4.0.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "gunicorn (>=23.0.0,<24.0.0)",
    "aiosmtplib (>=4.0.2,<5.0.0)",
    "aiofiles (>=24.1.0,<25.0.0)",
    "pre-commit (>=4.3.0,<5.0.0)",
    "mypy (>=1.18.1,<2.0.0)",
    "argon2-cffi (>=25.1.0,<26.0.0)",
    "orjson (>=3.11.3,<4.0.0)",
    "phonenumbers (>=9.0.15,<10.0.0)",
    "faststream[cli,rabbit] (>=0.5.48,<0.6.0)",
    "aiosqlite (>=0.21.0,<0.22.0)",
]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Linters section

[tool.ruff]
target-version = "py313"
line-length = 79
fix = true
show-fixes = true
output-format = "concise"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",  # Checked by mypy
    "FBT",
    "EM",
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D203",
    "TD002", "TD003",
    "FIX002",
    "TRY003",
    "RUF001", "RUF002", "RUF003",
    "PLC0414",
    "COM812",
    "UP040",
    "PLR0913",
    "TID252",
    "B904",
    "N818",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
line-length = 79
skip-magic-trailing-comma = true

[tool.mypy]
strict = true
plugins = ["pydantic.mypy"]

[tool.importlinter]
root_package = "src"
include_external_packages = true

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
